{
    "Body":"I have met a weird problem on a Samsung Galaxy Note 2, running Android 4.3, with an origin-forgetton rooted rom.getenforce returns \"Permissive\", so selinux is Permissive.cat \/proc\/self\/status returns CapBnd\/CapEff\/CapPrm ffffffffffffffff after su, so all the capabilities are granted.su is from chainfire's SuperSU.The syndrome is, after su any executable under \/data calling execve() fails with EACCES.  BUT, execve() under \/data is permitted by a normal user.To demonstrate, all the following experiments are carried out after su. Compile the following program into a static linked binary, say execve.# gcc -static execve.c -o execve\/* execve.c *\/#include #include #include intmain(int argc, char *argv[]){  char *newargv[] = { NULL, \"hello\", \"world\", NULL };  char *newenviron[] = { NULL };  if (argc != 2) {    fprintf(stderr, \"Usage: %s \\n\", argv[0]);    exit(EXIT_FAILURE);  }  newargv[0] = argv[1];  execve(argv[1], newargv, newenviron);  perror(\"execve\");   \/* execve() only returns on error *\/  exit(EXIT_FAILURE);}Running \"execve \/system\/bin\/ls\" should be equivalent to \"ls hello world\".But if execve is put under any subdirectory of \/data, \"execve \/system\/bin\/ls\" results in \"Permission Denied\".If execve is put into any of \/, \/system, \/cache, \/mnt\/obb. execve() works.Remounting \/data with exactly the same mount options as \/cache does not help.Symlinking a subdirectory from \/cache into \/data containing execve works.ln -s \/cache\/test \/data\/test # \/data\/test\/execve worksAnd in reverse, execve does not work.ln -s \/cache\/test1 \/data\/test1 # \/cache\/test1\/execve Permission DeniedBind mount \/data to \/bind. \/bind\/execve works, but \/data\/execve does not.mount -o bind \/data \/bindConclusion: There is soming preventing any executables under \/data from making execve() syscall.  The mechanism has nothing to do with the filesystem attributes, and symlink is dereferenced before the mechanism is applied.Question: What mechanism in Android could give this strange behavior?Reference:http:\/\/forum.xda-developers.com\/showpost.php?p=56264859&postcount=414",
    "ViewCount":"525",
    "LastActivityDate":"2014-12-15T10:01:58.793",
    "ClosedDate":"2014-12-19T17:37:02.913",
    "Title":"execve permission denied under \/data",
    "LastEditorUserId":"84960",
    "Tags":"",
    "LastEditDate":"2014-12-15T01:42:45.907",
    "CommentCount":"1",
    "AnswerCount":"1",
    "AcceptedAnswerId":"91745",
    "Score":"0",
    "CommunityOwnedDate":null,
    "LastEditorDisplayName":null,
    "PostTypeId":"1",
    "OwnerUserId":"84960",
    "CreationDate":"2014-12-14T08:56:03.733",
    "FavoriteCount":null,
    "Id":"91650",
    "history":[
        {
            "Comment":null,
            "CreationDate":"2014-12-14T08:56:03.733",
            "UserDisplayName":null,
            "RevisionGUID":"80545087-2bfe-4533-b181-ec1089351c04",
            "UserId":"84960",
            "CloseReasonId":null,
            "PostId":"91650",
            "PostHistoryTypeId":"2",
            "Id":"300062",
            "Text":"I have met a weird problem on a Samsung Galaxy Note 2, running Android 4.3, with an origin-forgetton rooted rom. 1. getenforce returns \"Permissive\", so selinux is Permissive. 2. cat \/proc\/self\/status returns CapBnd\/CapEff\/CapPrm ffffffffffffffff after su, so all the capabilities are granted. 3. su is from chainfire's SuperSU.The syndrome is, any executable under \/data calling execve() fails with EACCES.To demonstrate, all the following experiments are carried out after su. Compile the following program into a static linked binary, say execve.    # gcc -static execve.c -o execve    \/* execve.c *\/    #include     #include     #include         int    main(int argc, char *argv[])    {      char *newargv[] = { NULL, \"hello\", \"world\", NULL };      char *newenviron[] = { NULL };          if (argc != 2) {        fprintf(stderr, \"Usage: %s \\n\", argv[0]);        exit(EXIT_FAILURE);      }          newargv[0] = argv[1];          execve(argv[1], newargv, newenviron);      perror(\"execve\");   \/* execve() only returns on error *\/      exit(EXIT_FAILURE);    }Running \"execve \/system\/bin\/ls\" should be equivalent to \"ls hello world\".But if execve is put under any subdirectory of \/data, \"execve \/system\/bin\/ls\" results in \"Permission Denied\". 1. If execve is put into any of \/, \/system, \/cache, \/mnt\/obb. execve() works. 2. Remounting \/data with exactly the same mount options as \/cache does not help. 3. Symlinking a subdirectory from \/cache into \/data containing execve works.    ln -s \/cache\/test \/data\/test # \/data\/test\/execve works        And in reverse, execve does not work.    ln -s \/cache\/test1 \/data\/test1 # \/cache\/test1\/execve Permission Denied 4. Bind mount \/data to \/bind. \/bind\/execve works, but \/data\/execve does not.    mount -o bind \/data \/bindConclusion: There seems to be soming preventing any executables under \/data from calling execve() syscall.  The mechanism has nothing to do with the filesystem attributes, and symlink is dereferenced before the mechanism is applied.Question: What mechanism in Android could give this strange behavior?"
        },
        {
            "Comment":null,
            "CreationDate":"2014-12-14T08:56:03.733",
            "UserDisplayName":null,
            "RevisionGUID":"80545087-2bfe-4533-b181-ec1089351c04",
            "UserId":"84960",
            "CloseReasonId":null,
            "PostId":"91650",
            "PostHistoryTypeId":"1",
            "Id":"300063",
            "Text":"execve permission denied under \/data"
        },
        {
            "Comment":null,
            "CreationDate":"2014-12-14T08:56:03.733",
            "UserDisplayName":null,
            "RevisionGUID":"80545087-2bfe-4533-b181-ec1089351c04",
            "UserId":"84960",
            "CloseReasonId":null,
            "PostId":"91650",
            "PostHistoryTypeId":"3",
            "Id":"300064",
            "Text":""
        },
        {
            "Comment":"deleted 10 characters in body",
            "CreationDate":"2014-12-14T09:01:06.203",
            "UserDisplayName":null,
            "RevisionGUID":"6cd74d1e-d909-4443-971a-5e87253992e8",
            "UserId":"84960",
            "CloseReasonId":null,
            "PostId":"91650",
            "PostHistoryTypeId":"5",
            "Id":"300066",
            "Text":"I have met a weird problem on a Samsung Galaxy Note 2, running Android 4.3, with an origin-forgetton rooted rom. 1. getenforce returns \"Permissive\", so selinux is Permissive. 2. cat \/proc\/self\/status returns CapBnd\/CapEff\/CapPrm ffffffffffffffff after su, so all the capabilities are granted. 3. su is from chainfire's SuperSU.The syndrome is, any executable under \/data calling execve() fails with EACCES.To demonstrate, all the following experiments are carried out after su. Compile the following program into a static linked binary, say execve.    # gcc -static execve.c -o execve    \/* execve.c *\/    #include     #include     #include         int    main(int argc, char *argv[])    {      char *newargv[] = { NULL, \"hello\", \"world\", NULL };      char *newenviron[] = { NULL };          if (argc != 2) {        fprintf(stderr, \"Usage: %s \\n\", argv[0]);        exit(EXIT_FAILURE);      }          newargv[0] = argv[1];          execve(argv[1], newargv, newenviron);      perror(\"execve\");   \/* execve() only returns on error *\/      exit(EXIT_FAILURE);    }Running \"execve \/system\/bin\/ls\" should be equivalent to \"ls hello world\".But if execve is put under any subdirectory of \/data, \"execve \/system\/bin\/ls\" results in \"Permission Denied\". 1. If execve is put into any of \/, \/system, \/cache, \/mnt\/obb. execve() works. 2. Remounting \/data with exactly the same mount options as \/cache does not help. 3. Symlinking a subdirectory from \/cache into \/data containing execve works.    ln -s \/cache\/test \/data\/test # \/data\/test\/execve works        And in reverse, execve does not work.    ln -s \/cache\/test1 \/data\/test1 # \/cache\/test1\/execve Permission Denied 4. Bind mount \/data to \/bind. \/bind\/execve works, but \/data\/execve does not.    mount -o bind \/data \/bindConclusion: There is soming preventing any executables under \/data from making execve() syscall.  The mechanism has nothing to do with the filesystem attributes, and symlink is dereferenced before the mechanism is applied.Question: What mechanism in Android could give this strange behavior?"
        },
        {
            "Comment":"added 67 characters in body",
            "CreationDate":"2014-12-15T01:42:45.907",
            "UserDisplayName":null,
            "RevisionGUID":"1d7dd551-5c9e-4282-9bf7-60fa3b1828d5",
            "UserId":"84960",
            "CloseReasonId":null,
            "PostId":"91650",
            "PostHistoryTypeId":"5",
            "Id":"300285",
            "Text":"I have met a weird problem on a Samsung Galaxy Note 2, running Android 4.3, with an origin-forgetton rooted rom. 1. getenforce returns \"Permissive\", so selinux is Permissive. 2. cat \/proc\/self\/status returns CapBnd\/CapEff\/CapPrm ffffffffffffffff after su, so all the capabilities are granted. 3. su is from chainfire's SuperSU.The syndrome is, after su any executable under \/data calling execve() fails with EACCES.  BUT, execve() under \/data is permitted by a normal user.To demonstrate, all the following experiments are carried out after su. Compile the following program into a static linked binary, say execve.    # gcc -static execve.c -o execve    \/* execve.c *\/    #include     #include     #include         int    main(int argc, char *argv[])    {      char *newargv[] = { NULL, \"hello\", \"world\", NULL };      char *newenviron[] = { NULL };          if (argc != 2) {        fprintf(stderr, \"Usage: %s \\n\", argv[0]);        exit(EXIT_FAILURE);      }          newargv[0] = argv[1];          execve(argv[1], newargv, newenviron);      perror(\"execve\");   \/* execve() only returns on error *\/      exit(EXIT_FAILURE);    }Running \"execve \/system\/bin\/ls\" should be equivalent to \"ls hello world\".But if execve is put under any subdirectory of \/data, \"execve \/system\/bin\/ls\" results in \"Permission Denied\". 1. If execve is put into any of \/, \/system, \/cache, \/mnt\/obb. execve() works. 2. Remounting \/data with exactly the same mount options as \/cache does not help. 3. Symlinking a subdirectory from \/cache into \/data containing execve works.    ln -s \/cache\/test \/data\/test # \/data\/test\/execve works        And in reverse, execve does not work.    ln -s \/cache\/test1 \/data\/test1 # \/cache\/test1\/execve Permission Denied 4. Bind mount \/data to \/bind. \/bind\/execve works, but \/data\/execve does not.    mount -o bind \/data \/bindConclusion: There is soming preventing any executables under \/data from making execve() syscall.  The mechanism has nothing to do with the filesystem attributes, and symlink is dereferenced before the mechanism is applied.Question: What mechanism in Android could give this strange behavior?Reference: - http:\/\/forum.xda-developers.com\/showpost.php?p=56264859&postcount=414"
        },
        {
            "Comment":"102",
            "CreationDate":"2014-12-19T17:37:02.913",
            "UserDisplayName":null,
            "RevisionGUID":"2c0a01b6-35a1-4f22-afa6-6bb91194ff34",
            "UserId":"-1",
            "CloseReasonId":null,
            "PostId":"91650",
            "PostHistoryTypeId":"10",
            "Id":"302134",
            "Text":"{\"Voters\":[{\"Id\":16575,\"DisplayName\":\"Izzy\"},{\"Id\":30530,\"DisplayName\":\"bmdixon\"},{\"Id\":40036,\"DisplayName\":\"RossC\"},{\"Id\":23379,\"DisplayName\":\"Sid\"},{\"Id\":1951,\"DisplayName\":\"Ryan Conrad\"}]}"
        }
    ]
}