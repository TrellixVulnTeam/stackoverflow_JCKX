{
    "Body":"I am trying to develop an app in which I could give users option to encrypt files. The scenario is : Users would select files or folders to encrypt. They would be presented with a EditText Box in which they would be required to enter a password. Now I can Encrypt files but the problem is: where should I store the password entered by the user?Moreover, I don't want to have multiple passwords for multiple files. It should be more like a Master password to encrypt all the files. Each time the password is entered by the user to encrypt\/decrypt, it should be validated against Master Password. However, if some files are encrypted and a user deletes my app, It won't be good for them to lose their data. So, I want some location which is secure and non deletable even if my app is deleted, So if they install my app again, they could decrypt them again without any hassle.Code I am using for encryption is:   public static byte[] generateKey(String password) throws Exception{    byte[] keyStart = password.getBytes(\"UTF-8\");    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");    sr.setSeed(keyStart);    kgen.init(128, sr);    SecretKey skey = kgen.generateKey();    return skey.getEncoded();}public static byte[] encodeFile(byte[] key, byte[] fileData) throws Exception{    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");    Cipher cipher = Cipher.getInstance(\"AES\");    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);    byte[] encrypted = cipher.doFinal(fileData);    return encrypted;}public static byte[] decodeFile(byte[] key, byte[] fileData) throws Exception{    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");    Cipher cipher = Cipher.getInstance(\"AES\");    cipher.init(Cipher.DECRYPT_MODE, skeySpec);    byte[] decrypted = cipher.doFinal(fileData);    return decrypted;}And the main part  try {                File fil;                int countencrypt=0;                int g = gridoutput.checkBoxState.length;                for(int j=0;jNote that I have hardcoded the \"password\" for clarity sake.I want to have something like ES-File explorer Encryption. By reading I Found out they use checksum. However, I don't know much about it and how to implement it. Please help me out.",
    "ViewCount":"68",
    "LastActivityDate":"2016-01-23T09:46:11.313",
    "ClosedDate":"2016-01-24T20:40:52.293",
    "Title":"Encrypting files in android",
    "LastEditorUserId":null,
    "Tags":"",
    "LastEditDate":null,
    "CommentCount":"7",
    "AnswerCount":"0",
    "AcceptedAnswerId":null,
    "Score":"-2",
    "CommunityOwnedDate":null,
    "LastEditorDisplayName":null,
    "PostTypeId":"1",
    "OwnerUserId":null,
    "CreationDate":"2016-01-22T16:05:47.287",
    "FavoriteCount":null,
    "Id":"135057",
    "history":[
        {
            "Comment":"from http:\/\/crypto.stackexchange.com\/questions\/32100\/encrypting-files-in-android",
            "CreationDate":"2016-01-23T09:46:11.313",
            "UserDisplayName":null,
            "RevisionGUID":"2dbded37-24d0-453a-aa78-0db5a9d76f3b",
            "UserId":"-1",
            "CloseReasonId":null,
            "PostId":"135057",
            "PostHistoryTypeId":"36",
            "Id":"448844",
            "Text":null
        },
        {
            "Comment":null,
            "CreationDate":"2016-01-22T16:05:47.287",
            "UserDisplayName":"Puneet Mehar",
            "RevisionGUID":"f5a51d82-55dc-4062-bbea-745ea6563249",
            "UserId":null,
            "CloseReasonId":null,
            "PostId":"135057",
            "PostHistoryTypeId":"2",
            "Id":"448845",
            "Text":"I am trying to develop an app in which I could give users option to encrypt files. The scenario is : Users would select files or folders to encrypt. They would be presented with a EditText Box in which they would be required to enter a password. Now I can Encrypt files but the problem is: ***where should I store the password entered by the user?***Moreover, I don't want to have multiple passwords for multiple files. It should be more like a Master password to encrypt all the files. Each time the password is entered by the user to encrypt\/decrypt, it should be validated against Master Password. However, if some files are encrypted and a user deletes my app, It won't be good for them to lose their data. So, I want some location which is secure and non deletable even if my app is deleted, So if they install my app again, they could decrypt them again without any hassle.Code I am using for encryption is:            public static byte[] generateKey(String password) throws Exception    {        byte[] keyStart = password.getBytes(\"UTF-8\");        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");        sr.setSeed(keyStart);        kgen.init(128, sr);        SecretKey skey = kgen.generateKey();        return skey.getEncoded();    }    public static byte[] encodeFile(byte[] key, byte[] fileData) throws Exception    {        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");        Cipher cipher = Cipher.getInstance(\"AES\");        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);        byte[] encrypted = cipher.doFinal(fileData);        return encrypted;    }    public static byte[] decodeFile(byte[] key, byte[] fileData) throws Exception    {        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");        Cipher cipher = Cipher.getInstance(\"AES\");        cipher.init(Cipher.DECRYPT_MODE, skeySpec);        byte[] decrypted = cipher.doFinal(fileData);        return decrypted;    }And the main part      try {                    File fil;                    int countencrypt=0;                    int g = gridoutput.checkBoxState.length;                    for(int j=0;j"
        },
        {
            "Comment":null,
            "CreationDate":"2016-01-22T16:05:47.287",
            "UserDisplayName":"Puneet Mehar",
            "RevisionGUID":"f5a51d82-55dc-4062-bbea-745ea6563249",
            "UserId":null,
            "CloseReasonId":null,
            "PostId":"135057",
            "PostHistoryTypeId":"1",
            "Id":"448846",
            "Text":"Encrypting files in android"
        },
        {
            "Comment":null,
            "CreationDate":"2016-01-22T16:05:47.287",
            "UserDisplayName":"Puneet Mehar",
            "RevisionGUID":"f5a51d82-55dc-4062-bbea-745ea6563249",
            "UserId":null,
            "CloseReasonId":null,
            "PostId":"135057",
            "PostHistoryTypeId":"3",
            "Id":"448847",
            "Text":""
        },
        {
            "Comment":"102",
            "CreationDate":"2016-01-24T20:40:52.293",
            "UserDisplayName":null,
            "RevisionGUID":"52e61574-a0eb-4453-8ca0-a127a3b3f934",
            "UserId":"-1",
            "CloseReasonId":null,
            "PostId":"135057",
            "PostHistoryTypeId":"10",
            "Id":"449323",
            "Text":"{\"Voters\":[{\"Id\":131553,\"DisplayName\":\"beeshyams\"},{\"Id\":96277,\"DisplayName\":\"Firelord\"},{\"Id\":16575,\"DisplayName\":\"Izzy\"},{\"Id\":44325,\"DisplayName\":\"Andrew T.\"},{\"Id\":12442,\"DisplayName\":\"Dan Hulme\"}]}"
        },
        {
            "Comment":null,
            "CreationDate":"2016-01-24T20:40:52.293",
            "UserDisplayName":null,
            "RevisionGUID":"7bd87dfc-d91f-4c16-9184-7687866c75ba",
            "UserId":"-1",
            "CloseReasonId":null,
            "PostId":"135057",
            "PostHistoryTypeId":"14",
            "Id":"449324",
            "Text":"{\"Voters\":[{\"Id\":-1,\"DisplayName\":\"Community\"}]}"
        }
    ]
}